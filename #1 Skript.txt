### 1. Einführung und Historie

Ada ist eine stark typisierte und prozedurale Programmiersprache, die Anfang der 1980er Jahre entwickelt wurde. Der Name stammt von Ada Lovelace, einer frühen Pionierin der Programmierung. Die Sprache wurde vor allem für sicherheitskritische Systeme entworfen und wird bis heute in der Luftfahrt, im Militär und in sicherheitsrelevanten Bereichen eingesetzt. Ihre strenge Typprüfung und Robustheit sind besonders nützlich für große und fehleranfällige Anwendungen.

---

### 2. Grundlegende Syntax

Ein Ada-Programm besteht aus mindestens einer Prozedur, die als Einstiegspunkt dient.

**Beispiel: Hello World in Ada**

```ada
with Ada.Text_IO;  -- Importiert die Bibliothek für Ein- und Ausgabe

procedure Hello_World is
begin
   Ada.Text_IO.Put_Line("Hello, World!");
end Hello_World;
```

### 3. Datentypen und Variablen

Ada ist eine stark typisierte Sprache und bietet eine Vielzahl von Datentypen wie `Integer`, `Float`, `Boolean`, `Character`, `String`, `Array`, und `Record`.

**Beispiel: Datentypen und Variablen**

```ada
procedure Data_Types is
   A : Integer := 10;
   B : Float := 5.5;
   C : Boolean := True;
   D : Character := 'A';
   Name : String := "Ada";

begin
   Ada.Text_IO.Put_Line("Integer: " & Integer'Image(A));
   Ada.Text_IO.Put_Line("Float: " & Float'Image(B));
   Ada.Text_IO.Put_Line("Boolean: " & Boolean'Image(C));
   Ada.Text_IO.Put_Line("Character: " & D);
   Ada.Text_IO.Put_Line("String: " & Name);
end Data_Types;
```

---

### 4. Kontrollstrukturen

#### If-Anweisung

```ada
procedure If_Example is
   X : Integer := 5;
begin
   if X > 0 then
      Ada.Text_IO.Put_Line("X ist positiv");
   elsif X < 0 then
      Ada.Text_IO.Put_Line("X ist negativ");
   else
      Ada.Text_IO.Put_Line("X ist null");
   end if;
end If_Example;
```

#### Schleifen

- `for`-Schleifen und `while`-Schleifen sind nützlich für Iterationen.

```ada
procedure Loop_Examples is
begin
   -- For-Schleife
   for I in 1 .. 5 loop
      Ada.Text_IO.Put_Line("I: " & Integer'Image(I));
   end loop;

   -- While-Schleife
   declare
      J : Integer := 1;
   begin
      while J <= 5 loop
         Ada.Text_IO.Put_Line("J: " & Integer'Image(J));
         J := J + 1;
      end loop;
   end;
end Loop_Examples;
```

---

### 5. Prozeduren und Funktionen

Prozeduren und Funktionen ermöglichen die Modularisierung und Wiederverwendung von Code.

```ada
procedure Greet(Name : in String) is
begin
   Ada.Text_IO.Put_Line("Hello, " & Name & "!");
end Greet;

function Square(X : Integer) return Integer is
begin
   return X * X;
end Square;
```

---

### 6. Packages und Modularisierung

Packages in Ada ermöglichen die Organisation von Code in separate Module. 

**Beispiel: Package Deklaration**

Datei `math_pkg.ads`:

```ada
package Math_Pkg is
   function Add(X, Y : Integer) return Integer;
end Math_Pkg;
```

Datei `math_pkg.adb`:

```ada
package body Math_Pkg is
   function Add(X, Y : Integer) return Integer is
   begin
      return X + Y;
   end Add;
end Math_Pkg;
```

---

### 7. Ausnahmebehandlung

Ada bietet eingebaute Mechanismen zur Ausnahmebehandlung (`Exception Handling`), die dabei helfen, mit Laufzeitfehlern umzugehen.

```ada
procedure Exception_Example is
   X, Y, Result : Integer := 0;
begin
   X := 10;
   Y := 0;
   begin
      Result := X / Y;  -- Dies löst eine Division durch Null aus
   exception
      when Constraint_Error =>
         Ada.Text_IO.Put_Line("Fehler: Division durch Null");
   end;
end Exception_Example;
```

---

### 8. Nebenläufigkeit (Concurrency)

Ada bietet Unterstützung für Nebenläufigkeit durch das Konzept von Tasks.

```ada
with Ada.Text_IO;

procedure Task_Example is
   task type Printer is
      entry Print(Message : String);
   end Printer;

   task body Printer is
   begin
      accept Print(Message : String) do
         Ada.Text_IO.Put_Line(Message);
      end Print;
   end Printer;

   P1, P2 : Printer;
begin
   P1.Print("Task P1 sagt Hallo!");
   P2.Print("Task P2 sagt Tschüss!");
end Task_Example;
```

---

### 9. Objektorientierte Programmierung in Ada

Ada unterstützt Objektorientierung, unter anderem durch das Konzept von "Tagged Types".

```ada
package Shape_Pkg is
   type Shape is abstract tagged null record;

   function Area(S : Shape) return Float is abstract;
end Shape_Pkg;

package Circle_Pkg is
   type Circle is new Shape_Pkg.Shape with record
      Radius : Float;
   end record;

   overriding function Area(C : Circle) return Float;
end Circle_Pkg;

package body Circle_Pkg is
   function Area(C : Circle) return Float is
   begin
      return 3.14159 * C.Radius * C.Radius;
   end Area;
end Circle_Pkg;
```

---

### 10. Beispiele und Tipps zur Fehlersuche

- **Strenge Typisierung nutzen**: Ada's strenge Typprüfung minimiert Fehler.
- **Exception Handling verwenden**: Die Ausnahmebehandlung hilft bei der Stabilität des Programms.
- **Verständliche Namensgebung**: Vermeide Abkürzungen und wähle beschreibende Namen.
- **Packages verwenden**: Modularisierung durch Packages verbessert die Lesbarkeit.

---

### 11. Beispielprogramm und Übungsaufgaben

Hier ein Beispiel für ein Programm zur Verwaltung einer einfachen Inventarliste.

**Inventar Package:**

`inventory.ads`:

```ada
package Inventory is
   type Item is record
      Name : String(1..20);
      Quantity : Integer;
   end record;

   procedure Add_Item(Name : String; Quantity : Integer);
   procedure Display_Items;
end Inventory;
```

`inventory.adb`:

```ada
package body Inventory is
   Items : array(1..100) of Item;
   Item_Count : Integer := 0;

   procedure Add_Item(Name : String; Quantity : Integer) is
   begin
      if Item_Count < Items'Length then
         Item_Count := Item_Count + 1;
         Items(Item_Count).Name := Name;
         Items(Item_Count).Quantity := Quantity;
      else
         Ada.Text_IO.Put_Line("Inventar ist voll");
      end if;
   end Add_Item;

   procedure Display_Items is
   begin
      for I in 1 .. Item_Count loop
         Ada.Text_IO.Put_Line(Items(I).Name & ": " & Integer'Image(Items(I).Quantity));
      end loop;
   end Display_Items;
end Inventory;
```

**Hauptprogramm**:

```ada
with Inventory;
with Ada.Text_IO;

procedure Main is
begin
   Inventory.Add_Item("Apfel", 10);
   Inventory.Add_Item("Banane", 5);
   Ada.Text_IO.Put_Line("Inventar:");
   Inventory.Display_Items;
end Main;
```
